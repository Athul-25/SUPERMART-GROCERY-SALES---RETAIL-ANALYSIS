# -*- coding: utf-8 -*-
"""Pandas_project.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1g70q3Lv-xHJvnOJ2W5FvanxwrXEJp5RL
"""

# import necessary libraries
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

# Read the dataset
df=pd.read_csv('/content/drive/MyDrive/Pandas_Project/Supermart Grocery Sales - Retail Analytics Dataset.csv')

df

df.head()

df.tail()

df.describe()

df.info()

df.shape

df.corr(numeric_only=True)

"""Missing Value checking"""

df.isna().sum()

# Rename the column Order Date to Order_Date
df.rename(columns={'Order Date':'Order_Date'},inplace=True)

df.dtypes

""" **Standardize Date Format**"""

# dates having multiple formats that changed to single format(Replace '/' with '-' in dates)
df['Order_Date'] = df['Order_Date'].str.replace('/', '-', regex=False)

# Convert to datetime format
df['Order_Date'] = pd.to_datetime(df['Order_Date'])

df.dtypes

"""**Data Cleaning and Transformation**"""

df.duplicated().sum()

# Check unique values in key categorical columns
df['Category'].unique()

df['Region'].unique()

"""**Feature Engineering**

Add Year and Month columns
"""

df['Year']=df['Order_Date'].dt.year
df['Year']

df['Month']=df['Order_Date'].dt.month_name()
df['Month']

# Add Profit Margin as a generated column
df['Profit_Margin']=(df['Profit']/df['Sales'])*100
df['Profit_Margin']

"""**ANALYSIS**

**Univariate Analysis**
"""

# Total Sales per Region
region_sales=df.groupby('Region')['Sales'].sum()
region_sales

#The kind argument allows to choose different types of plots,
#when using pandas plot() function.

# Barplot visualization
region_sales.plot(kind='bar',color='#000080',figsize=(5,3))
plt.title('Total Sales by Region')
plt.xlabel('Region')
plt.ylabel('Total Sales')
plt.xticks(rotation=45)
plt.show()

# Histplot of Profit Distribution
plt.hist(df['Profit'],color='#000080')
plt.title('Histplot Profit Distribution',pad=10)
plt.xlabel('Profit')
plt.ylabel('Frequency')
plt.show()

# count the number of products in each category
category_counts = df['Category'].value_counts()
category_counts

# startangle=90: Sets the starting angle for the first wedge in a pie chart at 90 degrees (top).
# cmap='Pastel1': Applies a soft, pastel color palette from the Pastel1 colormap in matplotlib,
# providing a set of light and pleasant colors for visualizing data.

# pie plot of products in each category
plt.figure(figsize=(5,5))
category_counts.plot(kind='pie', autopct='%1.1f%%',cmap='Pastel1')
plt.title('Product Distribution by Category')
plt.ylabel('')  # Remove the y-label
plt.show()

df

df['Profit'].value_counts()

# sales trend over time (monthly)
monthly_sales = df.groupby(['Year','Month'])['Sales'].sum()
monthly_sales

# line plot of sales trend over time (monthly)
monthly_sales.plot(kind='line',figsize=(6,4),marker='o')
plt.title('Monthly Sales Trend')
plt.xlabel('Time')
plt.ylabel('Total Sales')
plt.xticks(rotation=90)
plt.show()

df['Category'].value_counts()

# top most profitable products
top_products = df.groupby('Category')['Profit'].sum()
top_products

# horizontal bar chart top most profitable products
top_products.plot(kind='barh',cmap='viridis', figsize=(6,4))
plt.title('Top Most Profitable Products')
plt.xlabel('Profit')
plt.ylabel('Product Name')
plt.xticks(rotation=90)
plt.show()

"""**Bivariate Analysis**"""

# total sales and profit by region
region_sales_profit=df.groupby('Region')[['Sales','Profit']].sum()
region_sales_profit

# bar chart total sales and profit by region
region_sales_profit.plot(kind='bar', figsize=(6,4), color=['skyblue', 'salmon'])
plt.title('Total Sales and Profit by Region')
plt.xlabel('Region')
plt.ylabel('Amount')
plt.xticks(rotation=45)
plt.show()

# average discount per category
avg_discount_category=df.groupby('Category')['Discount'].mean()
avg_discount_category

# pie chart of average discount per category
avg_discount_category.plot(kind='pie',figsize=(6,4),autopct="%1.2f%%")
plt.title('Average Discount by Category',pad=15)
plt.ylabel('')
plt.show()

#unstack() is a method that reshapes the DataFrame by pivoting the specified level of a multi-level index to columns,
#making it easier to analyze data in a table format.

# monthly sales by region
monthly_sales_region = df.groupby(['Month', 'Region'])['Sales'].sum().unstack()
monthly_sales_region

# bar plot of monthly sales by region
monthly_sales_region.plot(kind='bar', stacked=True, figsize=(6,4))
plt.title('Monthly Sales by Region')
plt.xlabel('Month')
plt.ylabel('Total Sales')
plt.xticks(rotation=45)
plt.show()

df['Discount Range'] = pd.cut(df['Discount'], bins=[0, 0.1, 0.2, 0.3, 0.4, 1], labels=['0-10%', '10-20%', '20-30%', '30-40%', '40%+'])
discount_profit = df.groupby('Discount Range')['Profit'].mean()

# bar plot
discount_profit.plot(kind='bar', figsize=(6,4), color='darkcyan')
plt.title('Effect of Discount on Profit')
plt.xlabel('Discount Range')
plt.ylabel('Average Profit')
plt.xticks(rotation=45)
plt.show()

# pie chart
discount_profit.plot(kind='pie',figsize=(5,5),autopct="%1.2f%%")
plt.ylabel('')
plt.show()

# Visualizing Outliers
# Using boxplots to visualize potential outliers in 'Profit', 'Discount', and 'Sales'
plt.figure(figsize=(6, 4))
plt.subplot(1, 3, 1)
sns.boxplot(df['Profit']).set_title('Profit')
plt.subplot(1, 3, 2)
sns.boxplot(df['Discount']).set_title('Discount')
plt.subplot(1, 3, 3)
sns.boxplot(df['Sales']).set_title('Sales')
plt.tight_layout()
plt.show()

# Analyzing Sales by Category
# Summing sales for each category to identify high-selling product categories
category_columns=[col for col in df.columns if col.startswith('Category_')]
sales_by_category=df[category_columns].multiply(df['Sales'],axis=0).sum().reset_index()
sales_by_category.columns=['Category','Total Sales']
df.head()

# sales_by_category = df.groupby('Category')['Sales'].sum().sort_values(ascending=False)
sales_by_category = df.groupby('Category')['Sales'].sum().reset_index()
sales_by_category

# Visualizing Sales by Category
# Creating a bar plot to showcase the distribution of total sales by each product category
plt.figure(figsize=(6,4))
# sns.barplot(x=df['Sales'],hue=df['Category'],data=sales_by_category, palette='viridis',legend=False)
sns.barplot(x=df['Sales'],y=df['Category'],data=sales_by_category, palette='viridis')
plt.title('Distribution of Sales by Category')
plt.xlabel('Total Sales')
plt.ylabel('Category')
plt.show()

# Correlation Analysis
# Using a heatmap to visualize the correlation between numerical features
corr = df.corr(numeric_only=True)
plt.figure(figsize=(6,6))
sns.heatmap(corr, annot=True)
plt.title('Correlation Heatmap')
plt.show()

yearly_sales = df.groupby('Year')['Sales'].sum().reset_index()
yearly_sales

# Sales Distribution by Year
df['Year'] = df['Order_Date'].dt.year
yearly_sales = df.groupby('Year')['Sales'].sum().reset_index()
plt.figure(figsize=(6,5))
plt.pie(yearly_sales['Sales'], labels=yearly_sales['Year'], autopct='%1.2f%%')
plt.title('Sales Distribution by Year',pad=10)
plt.axis('equal')
plt.show()

# Yearly Sales Trend
plt.figure(figsize=(6,4))
sns.lineplot(x='Year', y='Sales', data=yearly_sales, marker='o', color='b')
plt.title('Yearly Sales Trend')
plt.xlabel('Year')
plt.ylabel('Total Sales')
plt.grid(True)
plt.show()

monthly_sales = df.groupby('Month')['Sales'].sum().reset_index()
monthly_sales

# Bar plot
plt.bar(monthly_sales['Month'],monthly_sales['Sales'],color='skyblue')
plt.title('Monthly Sales')
plt.xlabel('Month')
plt.ylabel('Total Sales')
plt.xticks(rotation=45)
plt.show()

plt.figure(figsize=(8,8))
plt.plot(monthly_sales['Month'], monthly_sales['Sales'], marker='o',color='green')
plt.title('Monthly Sales')
plt.xlabel('Month')
plt.ylabel('Total Sales')
plt.xticks(rotation=45)
plt.grid(True)
plt.show()

df

df[df['Region']=='North']

# Group by city and sum sales
city_sales = df.groupby('City')['Sales'].sum().reset_index()
city_sales

# Sort by sales in descending order
city_sales_sorted = city_sales.sort_values(by='Sales', ascending=False)
city_sales_sorted

# Get the top 3 cities
top_3_cities = city_sales_sorted.head(3)
top_3_cities

plt.figure(figsize=(4,3))
top_3_cities.plot(kind='barh',x='City',y='Sales',color='skyblue',legend=False)
plt.title('Top 3 Cities by Sales')
plt.ylabel('Total Sales')
plt.xlabel('City')
plt.xticks(rotation=90)
plt.show()

# Group by customer and calculate total sales
customer_sales = df.groupby('Customer Name')['Sales'].sum().reset_index()
customer_sales

# Sort by sales in descending order
customer_sales_sorted = customer_sales.sort_values(by='Sales', ascending=False)
customer_sales_sorted

# Sort by sales in descending order
customer_sales_sorted = customer_sales.sort_values(by='Sales', ascending=False)
customer_sales_sorted

# Select the top 5 customers
top_5_customers = customer_sales_sorted.head(5)
top_5_customers

# Plot top 5 customers
top_5_customers.plot(kind='barh', x='Customer Name', y='Sales',figsize=(5,3),cmap='Pastel1', legend=False)
plt.title('Top 5 Customers by Sales',pad=10)
plt.ylabel('Total Sales')
plt.xlabel('Customer')
plt.xticks(rotation=90)
plt.show()

# Plot top 5 customers as a pie chart
top_5_customers.set_index('Customer Name')['Sales'].plot(
    kind='pie',
    autopct="%1.2f%%",cmap='Pastel1',
    figsize=(6,6),
    labels=top_5_customers['Customer Name'],  # Use customer names as labels
    title="Top 5 Customers by Sales"
)
plt.ylabel("")  # Remove the default y-axis label
plt.show()

#  Average Discount by Category
avg_discount_category=df.groupby('Category')['Discount'].mean()
avg_discount_category

# Visualization
import matplotlib.pyplot as plt

# Assuming avg_discount_category is your DataFrame with category and average discount values
avg_discount_category.plot(kind='bar', figsize=(5,4), color=plt.cm.Pastel1.colors)  # Corrected color reference
plt.title('Average Discount by Category')
plt.xlabel('Category')
plt.ylabel('Average Discount')
plt.xticks(rotation=45)
plt.show()

monthly_sales_seasonal = df.groupby('Month')['Sales'].sum()
monthly_sales_seasonal

# Visualization
monthly_sales_seasonal.plot(kind='bar', figsize=(6,4), color='coral')
plt.title('Seasonal Sales Trend')
plt.xlabel('Month')
plt.ylabel('Total Sales')
plt.xticks(rotation=45)
plt.show()

# Top 10 Customers by Total Sales
customer_sales = df.groupby('Customer Name')['Sales'].sum().nlargest(10)
customer_sales

# Visualization
customer_sales.plot(kind='barh', figsize=(6,4),color='teal')
plt.title('Top 10 Customers by Total Sales',pad=10)
plt.xlabel('Total Sales')
plt.ylabel('Customer Name')
plt.show()

customer_sales.plot(kind='pie', figsize=(7,5),autopct="%1.2f%%")
plt.ylabel('')
plt.show()

df.columns

df

category_sales = df.groupby('Category')['Sales'].sum().sort_values(ascending=False)
category_sales

category_sales.plot(kind='pie',title='Top Categories by Sales',autopct='%1.2f%%',color='Pastel1')
plt.ylabel('')
plt.show()

# City with Maximum Profit
city_profit=df.groupby('City')['Profit'].sum().sort_values(ascending=False).head(1)
city_profit

discount_profit_margin=df.groupby('Discount')['Profit'].mean().sort_index()
discount_profit_margin

category_discount=df.groupby('Category')['Discount'].sum().sort_values(ascending=False)
category_discount

subcategory_sales = df.groupby('Sub Category')['Sales'].sum().sort_values(ascending=False)
subcategory_sales

subcategory_sales.plot(kind='bar', title='Subcategory Sales Performance', color=plt.cm.Pastel1.colors)
plt.xlabel('Sub Category')
plt.ylabel('Total Sales')
plt.show()

category_profit_ratio = df.groupby('Category').apply(lambda x: x['Profit'].sum() / x['Sales'].sum())
category_profit_ratio

order_distribution = df['Order_Date'].dt.year.value_counts()
order_distribution

order_distribution.plot(kind='bar',title='Order Distribution Across Years',color='teal')
plt.xlabel('Year')
plt.ylabel('Number of Orders')
plt.show()

average_order_value = df['Sales'].mean()
average_order_value

df['Weekday'] = df['Order_Date'].dt.day_name()
weekday_sales = df.groupby('Weekday')['Sales'].sum()
weekday_sales

df

var1=df[['Sales', 'Profit']].corr()
sns.heatmap(var1,annot=True)
plt.show()